const { storeExists } = require("../utils/namespaceExists");


module.exports = {
  description: "Добавить поддержку JWT",
  prompts: [],
  actions: [
    {
      type: 'add',
      path: '../src/store/auth/index.ts',
      templateFile: './auth/index.ts.hbs',
      abortOnFail: true,
    },
    {
      type: 'add',
      path: '../src/store/auth/actionsTypes.ts',
      templateFile: './auth/actionsTypes.ts.hbs',
      abortOnFail: true,
    },
    {
      type: 'add',
      path: '../src/store/auth/actionCreators.ts',
      templateFile: './auth/actionCreators.ts.hbs',
      abortOnFail: true,
    },
    {
      type: 'add',
      path: '../src/store/auth/handlers.ts',
      templateFile: './auth/handlers.ts.hbs',
      abortOnFail: true,
    },
    {
      type: 'add',
      path: '../src/store/auth/selectors.ts',
      templateFile: './auth/selectors.ts.hbs',
      abortOnFail: true,
    },
    {
      type: 'add',
      path: '../src/store/auth/sagas/index.ts',
      templateFile: './auth/sagas/index.ts.hbs',
      abortOnFail: true,
    },
    {
      type: 'add',
      path: '../src/store/auth/sagas/login.ts',
      templateFile: './auth/sagas/login.ts.hbs',
      abortOnFail: true,
    },
    {
      type: 'add',
      path: '../src/store/auth/sagas/logout.ts',
      templateFile: './auth/sagas/logout.ts.hbs',
      abortOnFail: true,
    },
    {
      type: 'add',
      path: '../src/types/store/AuthState.ts',
      templateFile: './auth/storeType.ts.hbs',
      abortOnFail: true,
    },
    {
      type: 'append',
      path: '../src/types/store/index.ts',
      pattern: /export interface State {/,
      template: '  auth: AuthState,',
      abortOnFail: true,
    },
    {
      type: 'modify',
      path: '../src/types/store/index.ts',
      pattern: /^/,
      template: `import { AuthState } from './AuthState';\n`,
      abortOnFail: true,
    },
    {
      type: 'modify',
      path: '../src/store/rootReducer.ts',
      pattern: /^/,
      template: `import auth from './auth';\n`,
      abortOnFail: true,
    },
    {
      type: 'append',
      path: '../src/store/rootReducer.ts',
      pattern: /export default {/,
      template: `  auth,`,
      abortOnFail: true,
    },
    {
      type: 'append',
      path: '../src/store/rootSaga.ts',
      pattern: /\/\/ sagas/,
      template: `import AuthSaga from './auth/sagas';`,
      abortOnFail: true,
    },
    {
      type: 'append',
      path: '../src/store/rootSaga.ts',
      pattern: /export default function\* rootSaga\(\) {/,
      template: `  yield fork(AuthSaga);`,
      abortOnFail: true,
    },
    {
      type: 'add',
      path: "../src/api/apiInterceptors.ts",
      templateFile: './auth/api/apiInterceptors.ts.hbs',
      abortOnFail: true,
    },
    {
      type: 'add',
      path: "../src/api/auth.ts",
      templateFile: './auth/api/auth.ts.hbs',
      abortOnFail: true,
    },
    {
      type: 'append',
      path: '../src/appConstants/api.ts',
      pattern: /export enum ApiEndpoint {/,
      template: '  AuthLogin = \'/auth/login\',\n  AuthRefresh = \'/auth/refresh\',\n  AuthLogout = \'/auth/logout\',',
      abortOnFail: true,
    },
    {
      type: 'modify',
      path: '../src/store/configureStore.ts',
      pattern: /^/,
      template: `import { apiInterceptors } from 'api/apiInterceptors';\n`,
      abortOnFail: true,
    },
    {
      type: 'append',
      path: '../src/store/configureStore.ts',
      pattern: /const persistor = persistStore\(store\);/,
      template: `  apiInterceptors(store);`,
      abortOnFail: true,
    },
    {
      type: 'add',
      path: '../src/containers/ProtectedRoute/index.tsx',
      templateFile: './auth/containers/protectedRoute.tsx.hbs',
      abortOnFail: true,
    },
    {
      type: 'add',
      path: '../src/hooks/useAuth.ts',
      templateFile: './auth/hooks/useAuth.ts.hbs',
      abortOnFail: true,
    },
    {
      type: 'modify',
      path: '../src/hooks/index.ts',
      pattern: /^/,
      template: `export { useAuth } from './useAuth';\n`,
      abortOnFail: true,
    },
  ],
}
